public class ECICTaskDao
{
    public static List<Task> findNotModifiedAutogeneratedTasksOfCases(Set<Id> caseIdSet) 
    {
        String fieldsToQuery = String.join(ECICCommonConstants.TASK_FIELDS, ECICCommonConstants.COMMA_DEL);

        return Database.query(
                                ' SELECT id, ' + fieldsToQuery
                        + ' FROM Task'
                              + ' WHERE (whatId IN :caseIdSet)'
			                        + ' AND (template_ID__c != null)'
			                        + ' AND (isDeleted = false)'
			                        + ' AND (isClosed = false)'
			                        + ' AND (isModified__c = \'false\')'
                              + ' ORDER BY Task_Number__c ASC'
                        );
    }
        
    public static Map<Id, Decimal> getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIds(Set<Id> caseIdSet) 
    {
    
    	return getNumberOfTasksByCaseIds([
    	                                   SELECT COUNT(id) taskCount, whatId caseId
						                   FROM Task
									       WHERE (whatId IN :caseIdSet)
								                AND (isClosed = false)
									            AND (
									                       (template_Id__c = null)                                 // NOTE: manual task: template ID = null
									                  OR ( (template_Id__c != null) AND (isModified__c = 'true') )
									                 )
								           GROUP BY whatId
								        ]);
    }
    
    public static Map<Id, Decimal> getNumberOfAllIncompleteTasksByCaseIds(Set<ID> caseIdSet) 
    {
        return getNumberOfTasksByCaseIds([
                                           SELECT COUNT(id) taskCount, whatId caseId
                                           FROM Task
                                           WHERE (whatId IN :caseIdSet)
                                                AND (isClosed = false)                                              // involves closed AND cancelled tasks
                                           GROUP BY whatId
                                        ]);
    }

    @testVisible private static Map<Id, Decimal> getNumberOfTasksByCaseIds(List<AggregateResult> aggregateResultList) 
    {
        Map<Id, Decimal> resultNumberOfTasksByCaseIdMap = new Map<Id, Decimal>();
        for (AggregateResult aggregateResult : aggregateResultList) 
        {
            resultNumberOfTasksByCaseIdMap.put((Id)aggregateResult.get('caseId'), (Decimal)aggregateResult.get('taskCount'));
        }
        return resultNumberOfTasksByCaseIdMap;      
    }
    
	public static Map<Id, Task> findNextOpenTaskByCaseIds(Set<Id> caseIdSet) 
	{
		return findNextOpenTaskByCaseIds([
					                        SELECT whatid, ownerId
								FROM Task 
											WHERE (template_id__c != null) 
												AND (whatId IN :caseIdSet)
												AND (IsClosed = false)
											ORDER BY Task_Number__c
										  ]);
	}
	
	@testVisible private static Map<Id, Task> findNextOpenTaskByCaseIds(List<Task> taskList)
	{
        Map<Id, Task> resultNextOpenTaskByCaseIdMap = new Map<Id, Task>();
        for (Task task : taskList) 
        {
				// only the first Task per Case is returned which has the lowest ranking (Task_Number__c) value
            if (! resultNextOpenTaskByCaseIdMap.containsKey(task.whatId) ) { resultNextOpenTaskByCaseIdMap.put(task.whatId, task); }
			}
        return resultNextOpenTaskByCaseIdMap;
	}
}