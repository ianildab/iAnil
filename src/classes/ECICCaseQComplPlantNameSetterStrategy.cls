/** * Set field on quality complaint cases: * * Case.Plant_name__c by Case.Plant__c * */public class ECICCaseQComplPlantNameSetterStrategy extends ECICCaseProcessingStrategyAbstract {        public override boolean OnBeforeInsert(List<sObject> newValues) {        Case[] qualityComplaints = filterQualityComplaintCases((List<Case>)newValues);        execute(null, qualityComplaints);        return true;    }    public override boolean OnBeforeUpdate(Map<ID, sObject> oldValuesMap, Map<ID, sObject> newValuesMap) {        Case[] qualityComplaints = filterQualityComplaintCases((List<Case>)newValuesMap.values());        execute((Map<ID, Case>)oldValuesMap, qualityComplaints);        return true;    }        private void execute(Map<ID, Case> oldCasesMap, Case[] newCasesList) {               Map<Case, ID> plantMap = new Map<Case, ID>();        for (Case newCase : newCasesList) {        	Case oldCase = oldCasesMap != null ? oldCasesMap.get(newCase.id) : null;            if (newCase.Plant__c != null                && (newCase.Plant_name__c == null                    || oldCase != null                        && newCase.Plant__c != oldCase.Plant__c) ) {                plantMap.put(newCase, newCase.Plant__c);            }        }                if (! plantMap.isEmpty()) {            Map<Id, Plant__c> plants = new Map<Id, Plant__c>([SELECT Name FROM Plant__c WHERE id IN :plantMap.values()]);                        for (Case currentCase : plantMap.keySet()) {                Plant__c plant = plants.get(currentCase.Plant__c);                                if (plant != null) {                    currentCase.Plant_name__c = plant.Name;                }            }        }    } }