@isTest
private class ECICTaskDaoTest 
{
    private static final User    TEST_RUN_USER                        = TEST_DummyUserFactory.createDefaultTestRunUser();
    
    private static void findNotModifiedAutogeneratedTasksOfCasesTest(
					                                    Boolean isCaseIdInSet, Boolean hasTemplateId, 
					                                    Boolean isNotDeleted, Boolean isOpen, Boolean isNotModified
                                  )
    {
        Case                dummyCase           = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id>             dummyCaseIdSet      = (isCaseIdInSet) ? new Set<Id>{ dummyCase.id }                                           : new Set<Id>();
        Task    dummyTask       = createTask(dummyCase, hasTemplateId, !isNotDeleted, isOpen, !isNotModified );
        
        List<Task> resultCaseList = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultCaseList = ECICTaskDao.findNotModifiedAutogeneratedTasksOfCases(dummyCaseIdSet);
            }
            Test.stopTest();
        }
        
        Boolean resultExpected = isCaseIdInSet && hasTemplateId && isNotDeleted && isOpen && isNotModified;
        System.assertEquals (resultExpected ? 1 : 0, resultCaseList.size());
    }

    private static testMethod void noneFindNotModifiedAutogeneratedTasksOfCasesTest()               { findNotModifiedAutogeneratedTasksOfCasesTest ( false, false, false, false, false ); } 
    private static testMethod void noneButNotModifiedFindNotModifiedAutogeneratedTasksOfCasesTest() { findNotModifiedAutogeneratedTasksOfCasesTest ( false, false, false, false, true  ); } 
    private static testMethod void noneButOpenFindNotModifiedAutogeneratedTasksOfCasesTest()        { findNotModifiedAutogeneratedTasksOfCasesTest ( false, false, false, true , false ); } 
    private static testMethod void noneButNotDeletedFindNotModifiedAutogeneratedTasksOfCasesTest()  { findNotModifiedAutogeneratedTasksOfCasesTest ( false, false, true , false, false ); } 
    private static testMethod void noneButHasTemplateFindNotModifiedAutogeneratedTasksOfCasesTest() { findNotModifiedAutogeneratedTasksOfCasesTest ( false, true , false, false, false ); } 
    private static testMethod void noneButInCaseSetFindNotModifiedAutogeneratedTasksOfCasesTest()   { findNotModifiedAutogeneratedTasksOfCasesTest ( true,  false, false, false, false ); } 

    private static testMethod void allButNotModifiedFindNotModifiedAutogeneratedTasksOfCasesTest()  { findNotModifiedAutogeneratedTasksOfCasesTest ( true , true , true , true , false ); } 
    private static testMethod void allButOpenFindNotModifiedAutogeneratedTasksOfCasesTest()         { findNotModifiedAutogeneratedTasksOfCasesTest ( true , true , true , false, true  ); } 
    private static testMethod void allButNotDeletedFindNotModifiedAutogeneratedTasksOfCasesTest()   { findNotModifiedAutogeneratedTasksOfCasesTest ( true , true , false, true , true  ); } 
    private static testMethod void allButHasTemplateFindNotModifiedAutogeneratedTasksOfCasesTest()  { findNotModifiedAutogeneratedTasksOfCasesTest ( true , false, true , true , true  ); } 
    private static testMethod void allButInCaseSetFindNotModifiedAutogeneratedTasksOfCasesTest()    { findNotModifiedAutogeneratedTasksOfCasesTest ( false, true , true , true , true  ); } 
    private static testMethod void allFindNotModifiedAutogeneratedTasksOfCasesTest()                { findNotModifiedAutogeneratedTasksOfCasesTest ( true , true , true , true , true  ); } 
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static testMethod void getNumberOfTasksByCaseIdsTest()
    {
        Case    dummyCase      = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id> dummyCaseIdSet = new Set<Id>{ dummyCase.id };
        Task    dummyTask      = createTask(dummyCase, false, false, false, false);

        List<AggregateResult> resultAggregateResultList = [
                                                               SELECT COUNT(id) taskCount, whatId caseId
                                                               FROM Task
                                                               WHERE (whatId IN :dummyCaseIdSet)
                                                               GROUP BY whatId
                                                          ];

        Map<Id, Decimal> resultCountByCaseIdMap = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultCountByCaseIdMap = ECICTaskDao.getNumberOfTasksByCaseIds(resultAggregateResultList);
            }
            Test.stopTest();
        }
        
        System.assert(resultCountByCaseIdMap.containsKey(dummyCase.Id));
        System.assertEquals(1, resultCountByCaseIdMap.get(dummyCase.Id));
    }
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static void getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest(
                                                        Boolean isCaseIdInSet, Boolean hasTemplateId, 
                                                        Boolean isOpen,        Boolean isModified
                                  )
        {
        Case                dummyCase           = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id>             dummyCaseIdSet      = (isCaseIdInSet) ? new Set<Id>{ dummyCase.id }                                           : new Set<Id>();
        Task    dummyTask       = createTask(dummyCase, hasTemplateId, false, isOpen, isModified );

        Map<Id, Decimal> resultCountByCaseIdMap = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultCountByCaseIdMap = ECICTaskDao.getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIds(dummyCaseIdSet);
            }
            Test.stopTest();
        }

        Boolean resultExpected = isCaseIdInSet && isOpen && (!hasTemplateId || isModified);
        System.assertEquals (resultExpected ? 1 : null, resultCountByCaseIdMap.get(dummyCase.id));
    }
    
    private static testMethod void noneGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()               { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( false, false, false, false ); } 
    private static testMethod void noneButNotModifiedGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest() { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( false, false, false, true  ); } 
    private static testMethod void noneButOpenGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()        { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( false, false, true , false ); } 
    private static testMethod void noneButHasTemplateGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest() { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( false, true , false, false ); } 
    private static testMethod void noneButInCaseSetGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()   { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( true,  false, false, false ); } 

    private static testMethod void allButNotModifiedGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()  { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( true , true , true , false ); } 
    private static testMethod void allButOpenGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()         { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( true , true , false, true  ); } 
    private static testMethod void allButHasTemplateGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()  { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( true , false, true , true  ); } 
    private static testMethod void allButInCaseSetGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()    { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( false, true , true , true  ); }
    private static testMethod void allGetNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest()                { getNumberOfIncompleteManualAndModifiedAutogeneratedTasksByCaseIdsTest ( true , true , true , true  ); } 
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static void getNumberOfAllIncompleteTasksByCaseIdsTest( Boolean isCaseIdInSet, Boolean isOpen)
    {
        Case                dummyCase           = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id>             dummyCaseIdSet      = (isCaseIdInSet) ? new Set<Id>{ dummyCase.id }                                           : new Set<Id>();
        Task    dummyTask       = createTask(dummyCase, false, false, isOpen, false);

        Map<Id, Decimal> resultCountByCaseIdMap = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultCountByCaseIdMap = ECICTaskDao.getNumberOfAllIncompleteTasksByCaseIds(dummyCaseIdSet);
    }
            Test.stopTest();
        }

        Boolean resultExpected = isCaseIdInSet && isOpen;
        System.assertEquals (resultExpected ? 1 : null, resultCountByCaseIdMap.get(dummyCase.id));
    }
    
    private static testMethod void noneGetNumberOfAllIncompleteTasksByCaseIdsTest()          { getNumberOfAllIncompleteTasksByCaseIdsTest ( false, false); } 
    private static testMethod void isOpenGetNumberOfAllIncompleteTasksByCaseIdsTest()        { getNumberOfAllIncompleteTasksByCaseIdsTest ( false, true ); } 
    private static testMethod void isCaseIdInSetGetNumberOfAllIncompleteTasksByCaseIdsTest() { getNumberOfAllIncompleteTasksByCaseIdsTest ( true,  false); } 
    private static testMethod void allGetNumberOfAllIncompleteTasksByCaseIdsTest()           { getNumberOfAllIncompleteTasksByCaseIdsTest ( true,  true ); } 
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static testMethod void findNextOpenTaskByCaseIds2Test()
    {
        Case                dummyCase           = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id>             dummyCaseIdSet      = new Set<Id>{ dummyCase.id };
        Task                dummyTask           = createTask(dummyCase, false, false, false, false );

        Map<Id, Task> resultNextOpenTaskByCaseIdMap = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultNextOpenTaskByCaseIdMap = ECICTaskDao.findNextOpenTaskByCaseIds(new List<Task>{ dummyTask });
    }
            Test.stopTest();
        }

        System.assert(resultNextOpenTaskByCaseIdMap.containsKey(dummyCase.id));
        System.assertEquals(dummyTask, resultNextOpenTaskByCaseIdMap.get(dummyCase.id));
    }
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static void findNextOpenTaskByCaseIds1Test( Boolean isCaseIdInSet, Boolean hasTemplateId, Boolean isOpen )
    {
        Case                dummyCase           = TEST_DummyInquiryCaseFactory.create(TEST_DummyInsertModeEnum.REAL);
        Set<Id>             dummyCaseIdSet      = (isCaseIdInSet) ? new Set<Id>{ dummyCase.id } : new Set<Id>();
        Task                dummyTask           = createTask(dummyCase, hasTemplateId, false, isOpen, false );

        Map<Id, Task> resultNextOpenTaskByCaseIdMap = null;
        System.runAs(TEST_RUN_USER)
        {
            Test.startTest();
            {
                resultNextOpenTaskByCaseIdMap = ECICTaskDao.findNextOpenTaskByCaseIds(dummyCaseIdSet);
            }
            Test.stopTest();
        }
        
        Boolean expectedResult = isCaseIdInSet && hasTemplateId && isOpen;
        System.assertEquals(expectedResult, resultNextOpenTaskByCaseIdMap.containsKey(dummyCase.id));
        if (expectedResult) { System.assertEquals(dummyTask.id, resultNextOpenTaskByCaseIdMap.get(dummyCase.id).id); }
    }

    private static testMethod void noneFindNextOpenTaskByCaseIds1Test()             { findNextOpenTaskByCaseIds1Test(false, false, false); }
    private static testMethod void openFindNextOpenTaskByCaseIds1Test()             { findNextOpenTaskByCaseIds1Test(false, false, true ); }
    private static testMethod void hasTemplateIdFindNextOpenTaskByCaseIds1Test()    { findNextOpenTaskByCaseIds1Test(false, true , false); }
    private static testMethod void notInCaseIdSetFindNextOpenTaskByCaseIds1Test()   { findNextOpenTaskByCaseIds1Test(false, true , true ); }
    private static testMethod void inCaseIdSetFindNextOpenTaskByCaseIds1Test()      { findNextOpenTaskByCaseIds1Test(true , false, false); }
    private static testMethod void noTemplateIdFindNextOpenTaskByCaseIds1Test()     { findNextOpenTaskByCaseIds1Test(true , false, true ); }
    private static testMethod void closedFindNextOpenTaskByCaseIds1Test()           { findNextOpenTaskByCaseIds1Test(true , true , false); }
    private static testMethod void allFindNextOpenTaskByCaseIds1Test()              { findNextOpenTaskByCaseIds1Test(true , true , true ); }
    
    // --------------------------------------------------------------------------------------------------------------------------------

    private static Task createTask(Case dummyCase, Boolean hasTemplateId, Boolean isDeleted, Boolean isOpen, Boolean isModified )
    {
        Action_Plan_Item__c dummyActionPlanItem = (hasTemplateId) ? TEST_DummyActionPlanItemFactory.create(TEST_DummyInsertModeEnum.REAL) : null;
        
        TEST_DummyTaskFactory.Config taskConfig = new TEST_DummyTaskFactory.Config();
                                     taskConfig.whatId     = dummyCase.id;
                                     taskConfig.templateId = (hasTemplateId) ? dummyActionPlanItem.id          : TEST_ConfigHelper.INTENTIONAL_NULL;
                                     taskConfig.status     = (isOpen)        ? ECICCommonConstants.STATUS_OPEN : ECICCommonConstants.STATUS_CANCELLED;
                                     taskConfig.isModified = isModified;  

        Task dummyTask = TEST_DummyTaskFactory.create (taskConfig, TEST_DummyInsertModeEnum.REAL);
        if (isDeleted) { delete dummyTask; }
        
        return dummyTask;
    }
    

}